<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" version="2.0">
  <channel>
    <title>Tom Dalling</title>
    <link>https://www.tomdalling.com/?utm_source=rss&amp;utm_medium=rss</link>
    <atom:link href="https://www.tomdalling.com/blog/feed/" rel="self" type="application/rss+xml"/>
    <description>Web &amp; software developer</description>
    <language>en</language>
    <generator>Tom Dalling's fingertips</generator>
    <sy:updatePeriod>daily</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Start With High-Level Tests</title>
      <link>https://www.tomdalling.com/blog/mentoring/start-with-high-level-tests/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<h2>Rule Of Thumb</h2>

<p>Start with high-level tests, and step down to lower-levels when the
implementation is stable.</p>

<h2>Background</h2>

<p>There are different kinds of tests, and each kind can be placed on a
continuum from high-level to low-level. High-level tests cover a
larger portion of the codebase, and tend to exercise application
features in a way that is closer to how a real user would.
Low level tests cover small units of the codebase, often
in isolation, and tend to exercise programmatic interfaces of internal
implementation details.</p>

<p>In the context of a Rails application, the kinds of tests can be
roughly ordered:</p>

<ol>
  <li>
<em>Highest</em>: System/feature/end-to-end tests</li>
  <li>Request/controller tests</li>
  <li>Tests for commands, interactors, background jobs, or other business logic</li>
  <li>Tests for individual models, views, or other small components</li>
  <li>
<em>Lowest</em>: Isolated unit tests for individual classes, often POROs,
where all dependencies have been mocked out</li>
</ol>

<h2>Rationale</h2>

<p>As with everything, choosing between high- and low-level tests
involves trade-offs.</p>

<p>The benefits of higher-level tests are:</p>

<ul>
  <li>We get higher confidence that the functionality actually works for
real users.</li>
  <li>Refactoring and experimentation are easier because we can change all
the implementation details without having to change the test.</li>
  <li>Fewer tests are required because each test covers a larger area of
the code.</li>
</ul>

<p>The costs of higher-level tests are:</p>

<ul>
  <li>The tests take longer to run, and can make the test suite slow.</li>
  <li>Edge cases and error scenarios are harder to test, and are often
neglected as a result.</li>
  <li>The tests are more complicated, and harder to debug when they
fail.</li>
</ul>

<p>Higher-level tests are better at the beginning, when the exact details
of the implementation are still being explored. Our understanding of
requirements increases as we work, which means that we understand the
<em>least</em> at the start, and the <em>most</em> at the end. This is why the
ability to refactor is important. The first implementation will not be
optimal, so we want the ability to make big changes easily while still
having confidence that everything connects together in a way that
works.</p>

<p>Lower-level tests are better for covering all the different edge cases
precisely. They are simpler and faster, which makes it easier to write
a lot of them, but there are a couple of drawbacks. They make
refactoring harder by coupling to implementation details, meaning that
changing the implementation often requires rewriting all those little
tests. And while they give high confidence that the individual parts
work correctly, they do not give much confidence that all the parts
are integrated together in a way that works properly for the user.</p>

<h2>Example Scenario</h2>

<p>Let’s say we are implementing a small new feature in a Rails
application.</p>

<p>Writing a single “happy path” system test does not take very long, and
it will drive out the majority of the implementation details. It will
exercise views, controllers, models, database migrations,
interactors/command objects — maybe even background jobs, external
third-party services, and new libraries.</p>

<p>In typical TDD fashion, we can repeatedly rerun the test while
exploring different approaches to the implementation. Once it passes,
we are free to change all of the implementation details. And after
deciding on an approach, we can run the test while refactoring —
cleaning up and refining the new code.</p>

<p>By this point we’re happy with the general design of the
implementation, and we’re confident that it works for the most
straight-forward use case, but we’re <em>not</em> confident that it is robust
against all the other use cases and error scenarios. This is where we
might step down to model validation tests, to cover some error cases
— or maybe a test at the interactor level, to cover a scenario where
a third-party service responds in a different way. These tests will
hamper refactoring, but hopefully most of the refactoring was already
done before this point.</p>
]]></description>
      <pubDate>Mon, 10 May 2021 00:00:00 -0000</pubDate>
      <category><![CDATA[Mentoring Notes]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.start-with-high-level-tests</guid>
    </item>
    <item>
      <title>The Tip Of The Inputberg</title>
      <link>https://www.tomdalling.com/blog/testing/the-tip-of-the-inputberg/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>Why did Apple not test what happens when a user supplies “True” as
their last name? Is it incompetence?</p>

<figure class="naked">
  <blockquote class="twitter-tweet">
    <a href="https://twitter.com/JPaulGibson/status/1368182852668583948">https://twitter.com/JPaulGibson/status/1368182852668583948</a>
  </blockquote>
</figure>


<p>I don’t think so. I think the explanation is simpler: it’s not
feasible. It’s highly impractical, if not computationally impossible,
to test every input.</p>
]]></description>
      <pubDate>Mon, 08 Mar 2021 00:00:00 -0000</pubDate>
      <category><![CDATA[Testing]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.the-tip-of-the-inputberg</guid>
    </item>
    <item>
      <title>Better User Stories</title>
      <link>https://www.tomdalling.com/blog/software-processes/better-user-stories/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>As a member of the software industry, I want user stories to focus
more on the problem definition, so that we can make better choices
around how to implement a solution.</p>

<p>Or should I say:</p>

<p>As a member of the software industry, it’s easy to decide on a
solution or implementation details too quickly, without a good
understanding of the problem we are trying to solve. This leads to
suboptimal software for the end user, technical debt, and rework that
could have been avoided. I propose that we change the user story
format to focus more on the problem definition, and less on a single
solution.</p>
]]></description>
      <pubDate>Mon, 07 Dec 2020 00:00:00 -0000</pubDate>
      <category><![CDATA[Software Processes]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.better-user-stories</guid>
    </item>
    <item>
      <title>Consistent Hammer Man</title>
      <link>https://www.tomdalling.com/blog/software-design/consistent-hammer-man/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>This is a short parable I came up while discussing linters, in
response to someone asking if I think it’s good to be inconsistent.</p>
]]></description>
      <pubDate>Sat, 21 Nov 2020 00:00:00 -0000</pubDate>
      <category><![CDATA[Software Design]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.consistent-hammer-man</guid>
    </item>
    <item>
      <title>What Is The Purpose Of Private?</title>
      <link>https://www.tomdalling.com/blog/software-design/what-is-the-purpose-of-private/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>Why use <code>private</code> at all? What is the benefit of trying to stop other
people from using code that works perfectly well? It’s to reduce
future maintenance costs by discouraging coupling to unstable
dependencies.</p>
]]></description>
      <pubDate>Mon, 09 Nov 2020 00:00:00 -0000</pubDate>
      <category><![CDATA[Software Design]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.what-is-the-purpose-of-private</guid>
    </item>
    <item>
      <title>Bleeting For Fun And Profit</title>
      <link>https://www.tomdalling.com/blog/random-stuff/bleeting-for-fun-and-profit/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>Today I want to coin the term <em>bleet</em>. It’s a type of short-form
writing somewhere between a blog post and a tweet.</p>
]]></description>
      <pubDate>Sat, 31 Oct 2020 00:00:00 -0000</pubDate>
      <category><![CDATA[Miscellaneous]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.bleeting-for-fun-and-profit</guid>
    </item>
    <item>
      <title>What's Stopping You From Coding Like This?</title>
      <link>https://www.tomdalling.com/blog/random-stuff/whats-stopping-you-from-coding-like-this/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>I made a <a href="https://gist.github.com/tomdalling/2540a1c785d51da2bf0d57164bd26d96">quick-and-dirty Ruby script</a> that animates the <a href="https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/viewing-contributions-on-your-profile#contributions-calendar">GitHub
contributions calendar</a>, for the express purpose of making this
satirical video:</p>

<figure class="youtube">
  <iframe src="https://www.youtube.com/embed/5wbtCyZTbTU" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</figure>
]]></description>
      <pubDate>Wed, 23 Sep 2020 00:00:00 -0000</pubDate>
      <category><![CDATA[Miscellaneous]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.whats-stopping-you-from-coding-like-this</guid>
    </item>
    <item>
      <title>The Pure Function As An Object (PFAAO) Ruby Pattern</title>
      <link>https://www.tomdalling.com/blog/ruby/pure-function-as-an-object-PFAAO-pattern/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>In this article, I want to demonstrate a nice way to write functional-style code in Ruby.
It is a way to write non-trivial pure functions, without a bunch of weird non-idiomatic code.
Also, the acronym is PFAAO, which I think sounds pretty cool.</p>
]]></description>
      <pubDate>Fri, 12 Feb 2016 00:00:00 -0000</pubDate>
      <category><![CDATA[Ruby]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.pure-function-as-an-object</guid>
    </item>
    <item>
      <title>FizzBuzz In Too Much Detail</title>
      <link>https://www.tomdalling.com/blog/software-design/fizzbuzz-in-too-much-detail/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>I know. FizzBuzz has been done to death. But I want to use it as a familiar
base upon which we can explore some of the common tradeoffs involved in writing
and maintaining software. In this article, I’ll show multiple implementations
of FizzBuzz, all designed to achieve different goals, and discuss the
implications of each.</p>
]]></description>
      <pubDate>Sun, 26 Apr 2015 00:00:00 -0000</pubDate>
      <category><![CDATA[Software Design]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.fizzbuzz</guid>
    </item>
    <item>
      <title>Making Fruity Bat (a Flappy Bird clone) in Ruby</title>
      <link>https://www.tomdalling.com/blog/ruby/fruity-bat-flappy-bird-clone-in-ruby/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>Today I live-streamed the making of Fruity Bat (a Flappy Bird clone) in
Ruby using the <code>gosu</code> gem. Watch the videos below, and check out the code on
github: <a href="https://github.com/tomdalling/fruity_bat">https://github.com/tomdalling/fruity_bat</a></p>
]]></description>
      <pubDate>Sun, 22 Feb 2015 00:00:00 -0000</pubDate>
      <category><![CDATA[Ruby]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.making-fruity-bat</guid>
    </item>
  </channel>
</rss>
