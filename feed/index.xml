<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" version="2.0">
  <channel>
    <title>Tom Dalling</title>
    <link>https://www.tomdalling.com/?utm_source=rss&amp;utm_medium=rss</link>
    <atom:link href="https://www.tomdalling.com/blog/feed/" rel="self" type="application/rss+xml"/>
    <description>Web &amp; software developer</description>
    <language>en</language>
    <generator>Tom Dalling's fingertips</generator>
    <sy:updatePeriod>daily</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Against Must-Haves (Part One)</title>
      <link>https://www.tomdalling.com/blog/software-processes/against-must-haves-part-one/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>Categorising requirements into buckets like “must-haves” and “nice-to-haves” is
a common approach to prioritisation in software projects. In my opinion, this is
a bad way to priortise work, for reasons which become clear when you look at the
incentives it produces.</p>
]]></description>
      <pubDate>Sat, 01 Apr 2023 00:00:00 -0000</pubDate>
      <category><![CDATA[Software Processes]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.against-must-haves-part-one</guid>
    </item>
    <item>
      <title>Agile Is A Glass Cannon</title>
      <link>https://www.tomdalling.com/blog/software-processes/agile-is-a-glass-cannon/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>A recent shower thought of mine is that agile software development
might be similar to the strategic concept of a <a href="https://en.wiktionary.org/wiki/glass_cannon"><em>glass
cannon</em></a> in gaming —
specifically, that it’s a high-risk high-reward strategy where the risk can be
mitigated by skill/experience.</p>
]]></description>
      <pubDate>Sat, 25 Mar 2023 00:00:00 -0000</pubDate>
      <category><![CDATA[Software Processes]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.agile-is-a-glass-cannon</guid>
    </item>
    <item>
      <title>Marketing Yourself As A Junior Engineer</title>
      <link>https://www.tomdalling.com/blog/mentoring/marketing-yourself-as-a-junior-engineer/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<blockquote>
  <p>If you know the enemy and know yourself, you need not fear the result
of a hundred battles. If you know yourself but not the enemy, for
every victory gained you will also suffer a defeat. If you know
neither the enemy nor yourself, you will succumb in every battle.</p>

  <p>— Sun Tzu, <em>The Art of War</em></p>
</blockquote>

<p>Applying for a junior engineering position, or any job, is an exercise
in marketing and sales. You are the product, and the employer is a
potential customer. To market and sell anything effectively, you need
to understand how the customer thinks.</p>

<p>In this article, I want to explore a bit of employer psychology when
it comes to hiring juniors, and give some suggestions that I
believe increase your chance of success.</p>
]]></description>
      <pubDate>Sun, 05 Feb 2023 00:00:00 -0000</pubDate>
      <category><![CDATA[Mentoring Notes]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.marketing-yourself-as-a-junior-engineer</guid>
    </item>
    <item>
      <title>Context, Costs, and Benefits</title>
      <link>https://www.tomdalling.com/blog/random-stuff/context-costs-and-benefits/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>When is “measure twice, cut once” bad advice?</p>

<p>One of my hobbies is complaining about the tendency of software developers to view choices as binary, moralistic decisions.
Measuring twice is obviously correct, and anyone who doesn’t do it is an unprofessional, evil wood waster.
Either that or double measurers are a bunch of know-nothing shysters selling snake oil for exorbitant consulting fees.
This black-and-white thinking is a mental shortcut that many animals take,
but sometimes it’s nice to apply a little more intellectual rigour than a Pomeranian.</p>

<p>I’d like us to think less in terms of <em>right</em> and <em>wrong</em> when it comes to technical decisions,
and think more in terms of <em>context</em>, <em>costs</em> and <em>benefits</em>.</p>
]]></description>
      <pubDate>Wed, 20 Jul 2022 00:00:00 -0000</pubDate>
      <category><![CDATA[Miscellaneous]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.context-costs-and-benefits</guid>
    </item>
    <item>
      <title>Thoughts On Schema Library Design</title>
      <link>https://www.tomdalling.com/blog/software-design/thoughts-on-schema-library-design/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>It’s that time of year again. It seems like about once a year I get
interested designing a schema library. This post is a collection of my
latest ideas and design goals, mostly based on what I’ve learnt from
the previous three or four implementations.</p>

<p>This topic is probably interesting to a tiny subset of developers, and
super boring to everyone else. I’ve tried to write this post in a way
that is accessible to a wider developer audience, but you have been
warned!</p>

<p>
]]></description>
      <pubDate>Sat, 03 Jul 2021 00:00:00 -0000</pubDate>
      <category><![CDATA[Software Design]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.thoughts-on-schema-library-design</guid>
    </item>
    <item>
      <title>GitHub Workflow For Automated Gem Releases</title>
      <link>https://www.tomdalling.com/blog/software-processes/github-workflow-for-automated-gem-releases/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>This is a quick look at the recent CI/release automation I wrote for
the <a href="https://github.com/tomdalling/byebug-skipper">byebug-skipper</a> gem.</p>

<figure class="youtube">
  <iframe src="https://www.youtube.com/embed/fmWgh2qsLlc" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</figure>


<h2>Links</h2>

<ul>
  <li>
    <p><a href="https://github.com/tomdalling/byebug-skipper/commits/youtube-video">Commits from the video</a></p>
  </li>
  <li>
    <p><a href="https://github.com/tomdalling/byebug-skipper/blob/7d784e6d4ec71f21405082ccf09626b21f5597e7/.github/workflows/release.yml">The “Release Gem” GitHub workflow</a></p>
  </li>
  <li>
    <p><a href="https://github.com/tomdalling/byebug-skipper/blob/7d784e6d4ec71f21405082ccf09626b21f5597e7/.versionrc.js">Config</a>
for <a href="https://github.com/conventional-changelog/standard-version">standard-version</a>,
which is what bumps the version and updates the changelog using the
commit history.</p>
  </li>
  <li>
    <p><a href="https://github.com/tomdalling/byebug-skipper/blob/7d784e6d4ec71f21405082ccf09626b21f5597e7/.github/workflows/ci.yml#L23-L26">CI step</a>
that ensures commit messages have the correct format</p>
  </li>
</ul>
]]></description>
      <pubDate>Sun, 20 Jun 2021 00:00:00 -0000</pubDate>
      <category><![CDATA[Software Processes]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.github-workflow-for-automated-gem-releases</guid>
    </item>
    <item>
      <title>Monologue On End-To-End Testing</title>
      <link>https://www.tomdalling.com/blog/testing/monologue-on-end-to-end-testing/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>I wanted to write down some of my thoughts on end-to-end testing,
mainly to help clarify my own thinking.</p>
]]></description>
      <pubDate>Mon, 31 May 2021 00:00:00 -0000</pubDate>
      <category><![CDATA[Testing]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.monologue-on-end-to-end-testing</guid>
    </item>
    <item>
      <title>Write Detailed RSpec Example Descriptions</title>
      <link>https://www.tomdalling.com/blog/mentoring/write-detailed-rspec-example-descriptions/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<h2>Rule Of Thumb</h2>

<p>RSpec examples should have enough detail in the descriptions to
rewrite them from scratch.</p>
]]></description>
      <pubDate>Mon, 17 May 2021 00:00:00 -0000</pubDate>
      <category><![CDATA[Mentoring Notes]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.write-detailed-rspec-example-descriptions</guid>
    </item>
    <item>
      <title>Start With High-Level Tests</title>
      <link>https://www.tomdalling.com/blog/mentoring/start-with-high-level-tests/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<h2>Rule Of Thumb</h2>

<p>Start with high-level tests, and step down to lower levels when the
implementation is stable.</p>
]]></description>
      <pubDate>Mon, 10 May 2021 00:00:00 -0000</pubDate>
      <category><![CDATA[Mentoring Notes]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.start-with-high-level-tests</guid>
    </item>
    <item>
      <title>The Tip Of The Inputberg</title>
      <link>https://www.tomdalling.com/blog/testing/the-tip-of-the-inputberg/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>Why did Apple not test what happens when a user supplies “True” as
their last name? Is it incompetence?</p>

<figure class="naked">
  <blockquote class="twitter-tweet">
    <a href="https://twitter.com/JPaulGibson/status/1368182852668583948">https://twitter.com/JPaulGibson/status/1368182852668583948</a>
  </blockquote>
</figure>


<p>I don’t think so. I think the explanation is simpler: it’s not
feasible. It’s highly impractical, if not computationally impossible,
to test every input.</p>
]]></description>
      <pubDate>Mon, 08 Mar 2021 00:00:00 -0000</pubDate>
      <category><![CDATA[Testing]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.the-tip-of-the-inputberg</guid>
    </item>
  </channel>
</rss>
